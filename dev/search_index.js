var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = RichRopes","category":"page"},{"location":"#RichRopes","page":"Home","title":"RichRopes","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for RichRopes.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [RichRopes]","category":"page"},{"location":"#RichRopes.AbstractRope","page":"Home","title":"RichRopes.AbstractRope","text":"AbstractRope <: AbstractString\n\nSupertype for Rope data structures.\n\n\n\n\n\n","category":"type"},{"location":"#RichRopes.cleave-Tuple{RichRope, UnitRange{<:Integer}}","page":"Home","title":"RichRopes.cleave","text":"cleave(rope::RichRope, range::UnitRange{<:Integer})\n\nReturn two ropes which are the head and tail of rope with range removed.  Range is measured in codepoints.\n\n\n\n\n\n","category":"method"},{"location":"#RichRopes.cleave-Union{Tuple{S}, Tuple{RichRope{S, RichRope{S, T} where T<:Union{Nothing, AbstractRope{S}}}, Integer}} where S","page":"Home","title":"RichRopes.cleave","text":"cleave(rope::RichRope, index::Integer)\n\nReturn two ropes created by splitting rope at index, as indexed by codepoints.\n\n\n\n\n\n","category":"method"},{"location":"#RichRopes.delete-Tuple{RichRope, Integer, Integer}","page":"Home","title":"RichRopes.delete","text":"delete(rope::RichRope, index::Integer, n::Integer)\n\nReturn a rope with n characters removed, beginning with the character at index.\n\n\n\n\n\n","category":"method"},{"location":"#RichRopes.delete-Tuple{RichRope, UnitRange{<:Integer}}","page":"Home","title":"RichRopes.delete","text":"delete(rope::RichRope, range::UnitRange{<:Integer})\n\nReturn a rope with the characters in range deleted.\n\n\n\n\n\n","category":"method"},{"location":"#RichRopes.splice-Tuple{RichRope, Union{Integer, UnitRange{<:Integer}}, AbstractString}","page":"Home","title":"RichRopes.splice","text":"splice(rope::RichRope, at::Union{Integer,UnitRange{<:Integer}}, str::AbstractString)\n\nReturn a new rope with str spliced into rope. If at is an Integer, the rope is split at at, if at is a range, that range is removed.\n\nExample\n\njulia> String(splice(RichRope(\"aabbcc\"), 3:4, \"!!\"))\n\"aa!!cc\"\n\njulia> String(splice(RichRope(\"aabbcc\"), 3, \"!!\"))\n\"aab!!bcc\"\n\n\n\n\n\n","category":"method"}]
}
